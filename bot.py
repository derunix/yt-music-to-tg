from dotenv import load_dotenv
import json
import redis.asyncio as redis
from collections import defaultdict
import re
from hashlib import sha256
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
import os
load_dotenv()
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
from yt_dlp import YoutubeDL

from functools import partial
SEARCH_RESULTS = {}
SEARCH_LAST_QUERY = {}

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "your_bot_token_here")
ADMIN_USER_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
redis_client = redis.from_url(redis_url)

# –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
DOWNLOAD_DIR = "/tmp/ytmusicbot"

os.makedirs(DOWNLOAD_DIR, exist_ok=True)

YDL_OPTS = {
    'format': 'bestaudio/best',
    'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title).80s.%(ext)s'),
    'noplaylist': True,
    'quiet': False,
    'verbose': True,
    'logger': None,
    'cookiefile': 'cookies.txt',  # ‚Üê –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
    }],
}

async def _search_and_reply(chat_id: int, raw_query: str):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    SEARCH_LAST_QUERY[chat_id] = raw_query
    if ADMIN_USER_ID:
        user = await bot.get_chat(chat_id)
        await bot.send_message(ADMIN_USER_ID, f"üîç –ü–æ–∏—Å–∫: \"{raw_query}\" –æ—Ç @{user.username or user.full_name}")
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é)
    query = raw_query.lower()
    query = re.sub(r'[\u200b-\u200f\u202a-\u202e\u2060\u3000]', '', query)  # –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    query = re.sub(r'[^\w–∞-—è—ë0-9]+', ' ', query, flags=re.UNICODE)  # —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–æ–±–µ–ª
    query = re.sub(r'\s+', ' ', query).strip()
    query = re.sub(r'—ë', '–µ', query)  # —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã

    await bot.send_message(chat_id, f"–ò—â—É: {query}...")

    max_results = 15
    search_url = f"ytsearch{max_results}:{query}"

    cached = await redis_client.get(f"search:{query}")
    if cached:
        entries = json.loads(cached)
        if entries:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ Redis –ø–æ –∫–ª—é—á—É video:{id} –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            new_entries = []
            for e in entries:
                vid = e.get("id")
                if not vid:
                    new_entries.append(e)
                    continue
                cached_vid = await redis_client.get(f"video:{vid}")
                if cached_vid:
                    try:
                        new_entries.append(json.loads(cached_vid))
                        continue
                    except Exception:
                        pass
                new_entries.append(e)
            entries = new_entries

            SEARCH_RESULTS[chat_id] = entries
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=entry['title'][:60], callback_data=f"dl_{idx}")]
                    for idx, entry in enumerate(entries)
                ] + [[InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="force_search")]]
            )
            await bot.send_message(chat_id, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –ø–µ—Å–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:", reply_markup=kb)
            return

    try:
        info = None
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞ –ø–æ–∏—Å–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        cached_info = await redis_client.get(f"search_raw:{query}")
        if cached_info:
            try:
                info = json.loads(cached_info)
            except Exception:
                info = None

        if not info:
            with YoutubeDL({**YDL_OPTS, "extract_flat": "in_playlist"}) as ydl:
                info = ydl.extract_info(search_url, download=False)
                await redis_client.setex(f"search_raw:{query}", 1800, json.dumps(info))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ
        all_cached_entries = []
        uncached_entries = []
        for e in info.get("entries", []):
            vid = e.get("id")
            if not vid:
                uncached_entries.append(e)
                continue
            cache_key = f"video:{vid}"
            cached = await redis_client.get(cache_key)
            if cached:
                try:
                    all_cached_entries.append(json.loads(cached))
                    continue
                except Exception:
                    pass
            uncached_entries.append(e)
        info["entries"] = uncached_entries + all_cached_entries

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ Redis (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        for e in info.get("entries", []):
            vid = e.get("id")
            if not vid:
                continue
            cache_key = f"video:{vid}"
            if not await redis_client.exists(cache_key):
                minimal = {
                    "id": vid,
                    "title": e.get("title"),
                    "webpage_url": e.get("webpage_url") or f"https://www.youtube.com/watch?v={vid}",
                    "duration": e.get("duration"),
                    "channel": e.get("channel"),
                    "channel_id": e.get("channel_id"),
                    "description": e.get("description"),
                    "source": "search_entry"
                }
                await redis_client.setex(cache_key, 86400, json.dumps(minimal))

        # --- —Ñ–∏–ª—å—Ç—Ä—ã (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ø—Ä–µ–∂–Ω–µ–≥–æ search_and_download) ---
        filter_words_title = [
            "official", "official video", "clip", "lyrics", "audio", "track", "single", "remix", "full album", "album version", "hd",
            "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ", "–∫–ª–∏–ø", "–ª–∏—Ä–∏–∫–∞", "–∞—É–¥–∏–æ", "–ø–µ—Å–Ω—è", "—Å–∏–Ω–≥–ª", "—Ä–µ–º–∏–∫—Å", "–∞–ª—å–±–æ–º", "–≤–∏–¥–µ–æ", "—Ç—Ä–µ–∫",
            "–∞–∫—É—Å—Ç–∏–∫–∞", "acoustic", "live",
            "–∂–∏–≤—å–µ–º", "–∂–∏–≤–æ–µ", "live version", "performance", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–≤–∂–∏–≤—É—é",
            "feat", "ft.", "auto-generated by youtube",
            "premiere", "debut", "original", "recording", "studio version", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è", "–ø—Ä–µ–º—å–µ—Ä–∞", "–¥–µ–±—é—Ç", "–æ—Ä–∏–≥–∏–Ω–∞–ª", "—Å—Ç—É–¥–∏–π–Ω–∞—è –≤–µ—Ä—Å–∏—è"
        ]
        filter_words_channel = [
            "music", "–º—É–∑—ã–∫–∞", "official", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", "records", "—Ä–µ–∫–æ—Ä–¥—Å", "sound", "–∑–≤—É–∫", "audiovisual",
            "label", "–ª–µ–π–±–ª", "entertainment", "media", "studio", "—Å—Ç—É–¥–∏—è", "production", "tv",
            "artist", "channel", "–º—É–∑—ã–∫–∞–Ω—Ç", "–ø—Ä–æ–µ–∫—Ç",
            "–≤–∏–¥–µ–æ–∫–ª–∏–ø", "–∫–∞–Ω–∞–ª", "–º—É–∑—ã–∫–∞ –≤–∏–¥–µ–æ", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª", "–ª—ç–π–±–ª", "–∑–≤—É–∫–æ–∑–∞–ø–∏—Å—å"
        ]
        block_words = [
            "—Ä–∞–∑–±–æ—Ä", "—Ä–∞–∑–±–∏—Ä–∞–µ—Ç", "—Ä–∞–∑–æ–±—Ä–∞–ª", "—Ä–∞–∑–±–∏—Ä–∞—é", "—Ä–∞–∑–±–∏—Ä–∞—Ç—å", "—Ä–∞–∑–±–æ—Ä–∫–∞",
            "–æ–±–∑–æ—Ä", "–æ–±–∑–æ—Ä—ã", "–æ–±–æ–∑—Ä–µ–≤–∞–µ—Ç", "–æ–±–æ–∑—Ä–µ–Ω–∏–µ",
            "—É—Ä–æ–∫", "—É—Ä–æ–∫–∏", "–æ–±—É—á–µ–Ω–∏–µ", "—É—á–µ–±–Ω–∏–∫", "how to", "lesson", "tutorial", "—Ç—É—Ç–æ—Ä–∏–∞–ª", "–∫–∞–∫ –∏–≥—Ä–∞—Ç—å", "–æ–±—É—á–∞—é",
            "–∫–∞—Ä–∞–æ–∫–µ", "–º–∏–Ω—É—Å", "–º–∏–Ω—É—Å–æ–≤–∫–∞", "playthrough",
            "reaction", "—Ä–µ–∞–∫—Ü–∏—è", "—Ä–µ–∞–≥–∏—Ä—É–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "analysis", "review", "—Ä–µ—Ü–µ–Ω–∑–∏—è",
            "live stream", "live concert",  "—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è",
            "—Å—Ç—Ä–∏–º–∏–ª", "–æ–±—Å—É–∂–¥–∞–µ–º", "–º–Ω–µ–Ω–∏–µ", "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "–±–æ–ª—Ç–æ–≤–Ω—è", "–ø–æ–¥–∫–∞—Å—Ç", "reupload", "–ø–µ—Ä–µ–∑–∞–ª–∏–≤",
            "making of", "–º–µ–π–∫–∏–Ω–≥", "–±–µ–∫—Å—Ç–µ–π–¥–∂", "backstage", "behind the scenes", "–∑–∞ –∫–∞–¥—Ä–æ–º", "–æ —Å–æ–∑–¥–∞–Ω–∏–∏", "—Å—ä—ë–º–∫–∏", "making-of"
        ]
        filtered = [
            e for e in info['entries']
            if (e.get("duration") or 0) < 400 and not e.get("is_short")
            and not any(word in (e.get("title") or "").lower() for word in block_words)
            and not any(word in (e.get("description") or "").lower() for word in block_words)
            and (
                any(word in (e.get("title") or "").lower() for word in filter_words_title)
                or any(word in (e.get("channel") or "").lower() for word in filter_words_channel)
                or any(word in (e.get("channel_id") or "").lower() for word in filter_words_channel)
                or any(word in (e.get("description") or "").lower() for word in filter_words_channel + filter_words_title)
            )
        ]
        entries = []
        for e in filtered:
            vid = e.get("id")
            cache_key = f"video:{vid}"
            cached_vid = await redis_client.get(cache_key)
            if cached_vid:
                try:
                    entries.append(json.loads(cached_vid))
                    continue
                except Exception:
                    pass
            entries.append(e)
            if len(entries) == 5:
                break
        await redis_client.setex(f"search:{query}", 3600, json.dumps(entries))
        if not entries:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.")
            return

        # –ö–µ—à–∏—Ä—É–µ–º –ø–æ video_id —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –ø–æ–ª–Ω—ã–π –∫—ç—à
        for entry in entries:
            vid = entry.get("id")
            if not vid:
                continue
            cache_key = f"video:{vid}"
            cached_vid = await redis_client.get(cache_key)
            if not cached_vid:
                minimal = {
                    "id": vid,
                    "title": entry.get("title"),
                    "webpage_url": entry.get("webpage_url") or f"https://www.youtube.com/watch?v={vid}",
                    "duration": entry.get("duration"),
                    "channel": entry.get("channel"),
                    "channel_id": entry.get("channel_id"),
                    "description": entry.get("description"),
                    "source": "search_entry"
                }
                await redis_client.setex(cache_key, 86400, json.dumps(minimal))

        SEARCH_RESULTS[chat_id] = entries

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=entry['title'][:60], callback_data=f"dl_{idx}")]
                for idx, entry in enumerate(entries)
            ] + [[InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="force_search")]]
        )
        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –ø–µ—Å–Ω—é:", reply_markup=kb)

    except Exception as e:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –Ω–∞ YouTube, —Å–∫–∞—á–∞—é –∏ –ø—Ä–∏—à–ª—é –≤ mp3.")

@dp.message()
async def search_and_download(message: types.Message):
    await _search_and_reply(message.chat.id, message.text or "")

# –ù–æ–≤—ã–π handler –¥–ª—è callback'–æ–≤
@dp.callback_query(F.data.startswith("dl_"))
async def callback_download(call: CallbackQuery):
    idx = int(call.data.split("_")[1])
    entries = SEARCH_RESULTS.get(call.message.chat.id)
    if not entries or idx >= len(entries):
        await call.message.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    entry = entries[idx]

    try:
        with YoutubeDL(YDL_OPTS) as ydl:
            vid = entry.get("id")
            cache_key = f"video:{vid}"
            cached_meta = await redis_client.get(cache_key)
            if cached_meta:
                try:
                    cached_meta = json.loads(cached_meta)
                except Exception:
                    cached_meta = None
            # –í—Å–µ–≥–¥–∞ –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ
            fresh_info = ydl.extract_info(entry['webpage_url'], download=False)
            processed_info = ydl.process_ie_result(fresh_info, download=True)
            if ADMIN_USER_ID:
                user = await bot.get_chat(call.message.chat.id)
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: \"{processed_info.get('title')}\"\nURL: {entry.get('webpage_url')}\n–ó–∞–ø—Ä–æ—Å–∏–ª: @{user.username or user.full_name}"
                )
            full_meta = {
                "id": vid,
                "title": processed_info.get("title"),
                "webpage_url": processed_info.get("webpage_url") or entry.get("webpage_url") or f"https://www.youtube.com/watch?v={vid}",
                "duration": processed_info.get("duration"),
                "channel": processed_info.get("channel"),
                "channel_id": processed_info.get("channel_id"),
                "description": processed_info.get("description"),
                "uploader": processed_info.get("uploader"),
                "source": "download_full"
            }
            await redis_client.setex(cache_key, 86400, json.dumps(full_meta))
            file_path = ydl.prepare_filename(processed_info).rsplit(".", 1)[0] + ".mp3"

        if not os.path.exists(file_path):
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
            return

        audio = FSInputFile(file_path)
        await bot.send_audio(call.message.chat.id, audio, title=processed_info.get('title'), performer=processed_info.get('uploader'))
        os.remove(file_path)

    except Exception as e:
        await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

# –ù–æ–≤—ã–π handler –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data == "force_search")
async def force_search_trigger(call: CallbackQuery):
    print("üîÅ force_search_trigger CALLED")
    chat_id = call.message.chat.id
    raw_query = SEARCH_LAST_QUERY.get(chat_id)
    if not raw_query:
        await bot.send_message(chat_id, "–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –µ—â—ë —Ä–∞–∑.")
        return

    # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
    norm_query = raw_query.lower()
    norm_query = re.sub(r'[\u200b-\u200f\u202a-\u202e\u2060\u3000]', '', norm_query)
    norm_query = re.sub(r'[^\w–∞-—è—ë0-9]+', ' ', norm_query, flags=re.UNICODE)
    norm_query = re.sub(r'\s+', ' ', norm_query).strip()
    norm_query = re.sub(r'—ë', '–µ', norm_query)
    await redis_client.delete(f"search:{norm_query}")
    await redis_client.delete(f"search_raw:{norm_query}")

    await bot.send_message(chat_id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à)...")
    await _search_and_reply(chat_id, raw_query)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())